/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as RegisterRouteImport } from './routes/register'
import { Route as PostsRouteImport } from './routes/posts'
import { Route as LogoutRouteImport } from './routes/logout'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthdRouteImport } from './routes/_authd'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts.index'
import { Route as PostsIdRouteImport } from './routes/posts.$id'
import { Route as AuthdT1RouteImport } from './routes/_authd/t1'
import { Route as AuthdPostsNewRouteImport } from './routes/_authd/posts.new'
import { Route as AuthdPostsIdDeleteRouteImport } from './routes/_authd/posts.$id_.delete'

const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsRoute = PostsRouteImport.update({
  id: '/posts',
  path: '/posts',
  getParentRoute: () => rootRouteImport,
} as any)
const LogoutRoute = LogoutRouteImport.update({
  id: '/logout',
  path: '/logout',
  getParentRoute: () => rootRouteImport,
} as any)
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthdRoute = AuthdRouteImport.update({
  id: '/_authd',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => PostsRoute,
} as any)
const PostsIdRoute = PostsIdRouteImport.update({
  id: '/$id',
  path: '/$id',
  getParentRoute: () => PostsRoute,
} as any)
const AuthdT1Route = AuthdT1RouteImport.update({
  id: '/t1',
  path: '/t1',
  getParentRoute: () => AuthdRoute,
} as any)
const AuthdPostsNewRoute = AuthdPostsNewRouteImport.update({
  id: '/posts/new',
  path: '/posts/new',
  getParentRoute: () => AuthdRoute,
} as any)
const AuthdPostsIdDeleteRoute = AuthdPostsIdDeleteRouteImport.update({
  id: '/posts/$id_/delete',
  path: '/posts/$id/delete',
  getParentRoute: () => AuthdRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/posts': typeof PostsRouteWithChildren
  '/register': typeof RegisterRoute
  '/t1': typeof AuthdT1Route
  '/posts/$id': typeof PostsIdRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/new': typeof AuthdPostsNewRoute
  '/posts/$id/delete': typeof AuthdPostsIdDeleteRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/register': typeof RegisterRoute
  '/t1': typeof AuthdT1Route
  '/posts/$id': typeof PostsIdRoute
  '/posts': typeof PostsIndexRoute
  '/posts/new': typeof AuthdPostsNewRoute
  '/posts/$id/delete': typeof AuthdPostsIdDeleteRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/_authd': typeof AuthdRouteWithChildren
  '/login': typeof LoginRoute
  '/logout': typeof LogoutRoute
  '/posts': typeof PostsRouteWithChildren
  '/register': typeof RegisterRoute
  '/_authd/t1': typeof AuthdT1Route
  '/posts/$id': typeof PostsIdRoute
  '/posts/': typeof PostsIndexRoute
  '/_authd/posts/new': typeof AuthdPostsNewRoute
  '/_authd/posts/$id_/delete': typeof AuthdPostsIdDeleteRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | '/logout'
    | '/posts'
    | '/register'
    | '/t1'
    | '/posts/$id'
    | '/posts/'
    | '/posts/new'
    | '/posts/$id/delete'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | '/logout'
    | '/register'
    | '/t1'
    | '/posts/$id'
    | '/posts'
    | '/posts/new'
    | '/posts/$id/delete'
  id:
    | '__root__'
    | '/'
    | '/_authd'
    | '/login'
    | '/logout'
    | '/posts'
    | '/register'
    | '/_authd/t1'
    | '/posts/$id'
    | '/posts/'
    | '/_authd/posts/new'
    | '/_authd/posts/$id_/delete'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AuthdRoute: typeof AuthdRouteWithChildren
  LoginRoute: typeof LoginRoute
  LogoutRoute: typeof LogoutRoute
  PostsRoute: typeof PostsRouteWithChildren
  RegisterRoute: typeof RegisterRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/register': {
      id: '/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof RegisterRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts': {
      id: '/posts'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/logout': {
      id: '/logout'
      path: '/logout'
      fullPath: '/logout'
      preLoaderRoute: typeof LogoutRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authd': {
      id: '/_authd'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/'
      fullPath: '/posts/'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof PostsRoute
    }
    '/posts/$id': {
      id: '/posts/$id'
      path: '/$id'
      fullPath: '/posts/$id'
      preLoaderRoute: typeof PostsIdRouteImport
      parentRoute: typeof PostsRoute
    }
    '/_authd/t1': {
      id: '/_authd/t1'
      path: '/t1'
      fullPath: '/t1'
      preLoaderRoute: typeof AuthdT1RouteImport
      parentRoute: typeof AuthdRoute
    }
    '/_authd/posts/new': {
      id: '/_authd/posts/new'
      path: '/posts/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof AuthdPostsNewRouteImport
      parentRoute: typeof AuthdRoute
    }
    '/_authd/posts/$id_/delete': {
      id: '/_authd/posts/$id_/delete'
      path: '/posts/$id/delete'
      fullPath: '/posts/$id/delete'
      preLoaderRoute: typeof AuthdPostsIdDeleteRouteImport
      parentRoute: typeof AuthdRoute
    }
  }
}

interface AuthdRouteChildren {
  AuthdT1Route: typeof AuthdT1Route
  AuthdPostsNewRoute: typeof AuthdPostsNewRoute
  AuthdPostsIdDeleteRoute: typeof AuthdPostsIdDeleteRoute
}

const AuthdRouteChildren: AuthdRouteChildren = {
  AuthdT1Route: AuthdT1Route,
  AuthdPostsNewRoute: AuthdPostsNewRoute,
  AuthdPostsIdDeleteRoute: AuthdPostsIdDeleteRoute,
}

const AuthdRouteWithChildren = AuthdRoute._addFileChildren(AuthdRouteChildren)

interface PostsRouteChildren {
  PostsIdRoute: typeof PostsIdRoute
  PostsIndexRoute: typeof PostsIndexRoute
}

const PostsRouteChildren: PostsRouteChildren = {
  PostsIdRoute: PostsIdRoute,
  PostsIndexRoute: PostsIndexRoute,
}

const PostsRouteWithChildren = PostsRoute._addFileChildren(PostsRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AuthdRoute: AuthdRouteWithChildren,
  LoginRoute: LoginRoute,
  LogoutRoute: LogoutRoute,
  PostsRoute: PostsRouteWithChildren,
  RegisterRoute: RegisterRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

import type { getRouter } from './router.tsx'
import type { createStart } from '@tanstack/react-start'
declare module '@tanstack/react-start' {
  interface Register {
    ssr: true
    router: Awaited<ReturnType<typeof getRouter>>
  }
}
